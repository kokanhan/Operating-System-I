#Han Jiang
#CS344 Operating systems I
#2019/10/14
#program 1 matrices
#Some problem solutions were provided by my first time CS344 class instructor Braxton Cuneo


#!/bin/bash
inputFile="$2"
secinFile="$3"
numArguments="$#"

#print out matrix dimensions (only one matrix at time )
dims(){
#declare row number and column number for use
row_num=0
col_num=0
#if number of argument is greater than 2 ("./matrix dims [name of file]" counts as 2 arguments), print out error message (stderr)
if [ $numArguments -gt 2 ]
then 
  echo "wrong argument" 1>&2
exit 1
#if input file is not readable, print out error message (stderr)
elif [ ! -r $inputFile ]
then        
  echo "Your fileis not readable" 1>&2
exit 1
else
#if there is no argument, and data is piped in
  if [ -p /dev/stdin ]       
        then 
            #store data to tempstdin file, print out the row number and column number on the screen, then remove the tempstdin file  
            cat /dev/stdin > tempstdin
#cat/wc usages from lecture and online sources
            row_num="$(cat tempstdin | wc -l)" 
            col_num="$(head -1 tempstdin | wc -w)"
            echo $row_num $col_num  
            rm  -f tempstdin
            exit 0
  fi
  #otherwise, user uses suggested commands, print out the row number and column number on the screen
  row_num="$(cat $inputFile | wc -l)"      
  col_num="$(head -1 $inputFile | wc -w)"
  echo $row_num $col_num
exit 0
fi

}

#reflect the elements of the input matrix along the main diagonal.
transpose(){
#if user use wrong command, print out error message. Command : ./matrix transpose [name of file]  
if [ $numArguments -gt 2 ]
then 
  echo "wrong argument" 1>&2
exit 1
#if input file is not readable, print out error message (stderr)
elif [ ! -r $inputFile ]
then        
  echo "Your file is not readable" 1>&2
exit 1
else
#if there is no argument, and data is piped in
  if [ -p /dev/stdin ]       
        then 
        #store data to tempstdin file, then read this tempstdin file
            cat /dev/stdin > tempstdin
            inputFile="tempstdin"
  fi
#prepare temp files for later 
rm -f temp0file
touch temp0file
temp="temp0file"
rm -f temp1file
touch temp1file
temp1="temp1file"
rm -f temp2file
touch temp2file
temp2="temp2file"
#set this value, change it after the matrix's first line has been tranposed 
var=true
#read the input file line by line
while read myLine
do
#if the matrix's first line hasn't been tranposed 
  if $var
  then     
  #change the first row to column and store it in temp file               
    echo -e "$myLine" | tr '\t' '\n' > "$temp"    
  else           
  #change the rest rows to columns and store them in another temp file 
    echo -e "$myLine" | tr '\t' '\n' > "$temp1"    
    #paste the columns next to the first column
    paste "$temp" "$temp1" > "$temp2"  
    #copy the transposed matrix from temp2 to temp  
    cat "$temp2" > "$temp"                              

  fi

var=false                          
done < "$inputFile"
cat "$temp"
#after running function delete all temporary files
rm *temp*


exit 0
fi

}



#mean function takes an MxN matrix and return an 1xN row vector, 
#where the first element is the mean of column one, the second element is the mean of column two, and so on.
mean(){
#prepare temp files for later 
rm -f tempcolfile
touch tempcolfile
tempCol="tempcolfile"
#if user use stdin instead of file path 
if [ $numArguments -ne 2 ]
then
#store stdin to a temp file
  cat > newtempstdin
  inputFile="newtempstdin"
fi
#get the column number for input file
cols=`head -n 1 $inputFile| wc -w`
#traversal all columns in the matrix
for (( i=1; i <= $cols; i++))
do 
#convert the values from columns to rows, and paste them to a temp file 
cut -f $i $inputFile | tr '\n' '\t'| paste >> $tempCol
done
rm -f tempmeanfile
touch tempmeanfile
tempMean="tempmeanfile"
rm -f newtempfile
touch newtempfile
newtemp="newtempfile"

#read the rows from converted matrix (stored in temp file)
while read myLine
do
 sum=0; 
 count=0;
 for i in $myLine
   do 
   #add values of matrix line by line, and sum them up
     count="$(cat $inputFile | wc -l)"
     ((sum+=i))
   done
   #calculate mean value for each row (actually each column) 
   mean_value=$(( ($sum + ($count /2)*( ($sum>0)*2-1)) / $count ))
   #stoe these mean values to a temp file              
   echo -e "$mean_value" >> $tempMean 
  
done < "$tempCol"
#paste the mean value on one line to a temp file 
paste -s -d '\t' $tempMean > $newtemp
cat "$newtemp"
#after running function delete all temporary files
rm *temp*
exit 0

}



#add two matrices those have same sizes, print out the new matrix
add(){
#if user use wrong command, print out error message. Command : ./matrix add [file1] [file2] 
if [ $numArguments -ne 3 ]
then 
  echo "wrong argument" 1>&2
exit 1
#if one file is not readable, print out error message. They have to be both readable
elif [ ! -r $inputFile ]
then        
  echo "One of your file is not readable" 1>&2
exit 1

 

else
#while the first input file and the second input file is readable.
while true
do
  rows1="$(cat $inputFile | wc -l)"  
  cols1="$(head -1 $inputFile | wc -w)"
  cols2="$(head -1 $secinFile | wc -w)"
  rows2="$(cat $secinFile | wc -l)" 
  if [ $cols1 -ne $cols2 ] || [ $rows1 -ne $rows2 ]
  then
      echo -e "mismatch" 1>&2
          exit 1
  fi
#read all numbers from the first file and then store to array named arr1 
  read -a arr1 <&3 || break
#read all numbers from the second file and then store to array named arr2
  read -a arr2 <&4 || break 
#count number is the size of matrix from the first file. The tested matrices have same size. So I don't think about different sizes of matrices
  count=${#arr1[@]}  
  #because array starts with 0(first element), so i start with 0 to traversal all numbers in the matrix 
    for ((i=0; i<count;i++))
  do  
    num1="${arr1[i]}"
    num2="${arr2[i]}"
    #sum up these two numbers 
    addsum=$(($num1 + $num2))
    #print the sum number one by one and separated with tab. If the sum number on the first position, there is not tab front it.
    if [ $i -ne 0 ];
    then
      printf "%s\t"
    fi
    printf "%d" "$addsum"
    
  done

printf "%s\n"
done 3<"$inputFile" 4<"$secinFile"
exit 0
fi
}




  
#mutiply two matrices with general mathematical way, print out the result  
multiply(){
#if user use wrong command, print out error message. Command : ./matrix multiply [file1] [file2] 
if [ $numArguments -ne 3 ] 
then
  echo -e "wrong arguments" 1>&2
      exit 1
fi
#declare row number and column number of both matrices
rows1="$(cat $inputFile | wc -l)"  
cols1="$(head -1 $inputFile | wc -w)"


cols2="$(head -1 $secinFile | wc -w)"
rows2="$(cat $secinFile | wc -l)" 

#if the first matrix's column number doesn't equal to the second matrix's row number, print out error message
if [ $cols1 -ne $rows2 ]
then

    echo -e "mismatch" 1>&2
    exit 1
fi
            
#while the first file is readable, read it line by line
while read myLine
do
#send these numbers in the line to a temp file, translate the tab to line, so these numbers are in the same position as second matrix's column
       echo "$myLine" | tr '\t' '\n' >"temp1mul"      
#traversal all numbers in second matrix's column, then send to a temp file. Cut field must start with 1
  for ((j=1; j<=cols2;j++))
  do
    cat $secinFile | cut -f $j > "temp2mul"            
    #declare the product value
    product=0
    #use while loop to store all numbers in the first matrix and the second matrix to different arrays 
while true
do
  read -a arr1 <&3 || break
  read -a arr2 <&4 || break 
  count=${#arr1[@]}  
    for ((i=0; i<count;i++))
  do  
    #math stuffs
    num1="${arr1[i]}"
    num2="${arr2[i]}"
    product=$(( $product+($num1*$num2) ))  
  done
done 3<"temp1mul" 4<"temp2mul"
#now thses product values are stored by lines, use tr to store them with matrix form. 
  if [ $j -lt $cols2 ]
  then
    echo -e "$product" | tr '\n' '\t'
  else
    echo "$product"
  fi

done


done < "$inputFile"


#remove temp files after run the function
rm *temp*
}



trap "rm -f *temp*" INT HUP TERM

#use if statement for correct argument. Usage: ./matrix [name of argument] [name of input file]. If the name of argument is not defined, print error message.  
if [ "$1" == "dims" ]
then
dims
elif [ "$1" == "add" ]
then
add
elif [ "$1" == "mean" ]
then
mean
elif [ "$1" == "transpose" ]
then
transpose
elif [ "$1" == "multiply" ]
then
multiply
else
  echo "wrong arguments" 1>&2
  exit 1
fi









